import pandas as pd
from datetime import datetime


# get the model data in a DataFrame
datafile = 'historical_table.csv'
df_rr_data = pd.read_csv(datafile, header=0)
enddate = datetime(df_rr_data['Year'].max(), df_rr_data['Month'].max(), df_rr_data['Day'].max())
#
df_future = pd.read_csv('russian_river_gcm_corrected.csv', header=0, parse_dates=['time'])
df_future = df_future.loc[df_future['time'] > enddate]
df_future['Year'] = pd.DatetimeIndex(df_future['time']).year
df_future['Month'] = pd.DatetimeIndex(df_future['time']).month
df_future['Day'] = pd.DatetimeIndex(df_future['time']).day

modlist = ['CanESM2', 'CNRM-CM5', 'HadGEM2-ES', 'MIROC5']
scenlist = ['rcp45', 'rcp85']
newlin = '\n'
# make the runoff string. all 1.0 x 22
ro_str = ''
for i in range(22):
        ro_str += ' 1.0'
ro_str += newlin

for mod in modlist:
        for scen in scenlist:
                # open the new data file for this model/scenario
                outfile = open('{}_{}_rr_corrected_future.data'.format(mod, scen), 'w')
                outfile.write('generated by build_data_file.py appended to original{}'.format(newlin))
                outfile.write('precip 15{}'.format(newlin))
                outfile.write('tmax 8{}'.format(newlin))
                outfile.write('tmin 8{}'.format(newlin))
                outfile.write('runoff 22{}'.format(newlin))
                outfile.write('#####################################################################{}'.format(newlin))

                # write the historical data
                for index, row in df_rr_data.iterrows():
                        line = '{} {:>3} {:>3}  0 0 0  '.format(int(row['Year']), int(row['Month']), int(row['Day']))
                        for z in range(1, 16):
                                line += ' {:>7.3f}'.format(row['pr_{}'.format(z)])
                        for z in range(1, 9):
                                line += ' {:>7.3f}'.format(row['tasmax_{}'.format(z)])
                        for z in range(1, 9):
                                line += ' {:>7.3f}'.format(row['tasmin_{}'.format(z)])
                        line += ro_str
                        outfile.write(line)
                # now the future data
                for index, row in df_future.iterrows():
                        line = '{} {:>3} {:>3}  0 0 0  '.format(int(row['Year']), int(row['Month']), int(row['Day']))
                        for z in range(1, 16):
                                line += ' {:>7.3f}'.format(row['pr_day_{}_{}_zone{}_cor'.format(mod, scen, z)])
                        for z in range(1, 9):
                                line += ' {:>7.3f}'.format(row['tasmax_day_{}_{}_zone{}_cor'.format(mod, scen, z)])
                        for z in range(1, 9):
                                line += ' {:>7.3f}'.format(row['tasmin_day_{}_{}_zone{}_cor'.format(mod, scen, z)])
                        line += ro_str
                        outfile.write(line)

                outfile.close()
print('done.')
