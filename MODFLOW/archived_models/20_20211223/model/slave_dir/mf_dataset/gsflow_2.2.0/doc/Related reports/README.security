In January of 2019 we received an email from Mans van Someren (mansvansomeren@live.nl) with regards to 
potential security issues in the common C code that is shared between PRMS and GSFLOW. The comments were 
very specific and related to the use of certain functions in the standard C library which have been 
superseded by “safer” versions of the same functions. Specifically, the comments are:

1.	unsafe sprintf calls when displaying warning and error messages leading to buffer overflows in some 
cases (should use snprintf instead)

    Markstrom: There were many uses of “sprint” and in all cases, they have been replaced with “snprinf”.

2.	unsafe strcpy calls in all the check_vars.c functions leading to stack buffer overflows.

    Markstrom: All calls to “strcpy” were replaced with “strncpy”.

3.	heap buffer overflow in the parse_args function when using the set parameter more than 100 times 
(no bounds check on *set_count).

    Markstrom: program stops if the user attempts to specify more than 100 command line arguments.

4.	buffer underflow in the fgets_rc function when it searches for a space character (' ') before a 
comment ('//').

    Markstrom: Modified code so that the string array index that keeps track of the comments never goes 
	negative.

5.	in the rc function in read_control.c there is an integer overflow which can lead to a buffer overflow. 
The size variable is a long that gets parsed from the control file and cant be a negative number. this 
size then gets multiplied by the size of the type of variable (double, float, long or char*) which can 
lead to an integer overflow (0x20000001*0x8 == 0x8) while size is still 0x20000001 thus attempting to 
write 0x20000001 values to an array of size 1 (0x8*1 == 0x8) resulting in a huge buffer overflow.

    Markstrom: The general problem is that if the format of the control file is too far out of whack with 
what is expected, there can be unexpected results. These problems (when they occurred) usually messed 
up the memory so bad that the program would dump core and exit. I tried to make this more robust. 
I believe that I have addressed the specific problem identified here.

6.	in get_next_line() in read_params.c there is a buffer overflow if max_data_ln_len is less than 
MAXDATALNLEN. the user can set max_data_ln_len via the command line argument '-MAXDATALNLEN' but 
this will not update MAXDATALNLEN (which cant even be updated because its a macro and not variable).

    Markstrom: Put in checks to see whether max_data_ln_len or MAXDATALNLEN is bigger, and then always 
use that one. The issue that we are using both of these should be revisited and a better solution should be adopted, but the specific problem should be addressed now.

7.	in read_dims in read_params.c there is a buffer underflow when reading the dimensions. it first 
allocates a char * array dim->notes then later if line[0] is an '@' it will decrement i by 1 (which is 0 
at the start) thus i becoming -1. then it will write a pointer to the rest of the line (duplicated with 
strdup) to dim->notes[-1].

    Markstrom: This is relic code left over from when PRMS included it’s own GUI. All of this should 
probably be removed, but for now, it has been disabled.

8.	in read_dims in read_params.c there is a buffer overflow when reading the comments. it allocates 
space for 1000 comments but reads an infinite amount.

    Markstrom: Modified code so that now it ignores any comments over 1000 (which is a lot of comments).
